// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Backend.proto

#ifndef PROTOBUF_INCLUDED_Backend_2eproto
#define PROTOBUF_INCLUDED_Backend_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ServiceLayer.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Backend_2eproto 

namespace protobuf_Backend_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Backend_2eproto
namespace chirp {
class Chirps;
class ChirpsDefaultTypeInternal;
extern ChirpsDefaultTypeInternal _Chirps_default_instance_;
class Follow;
class FollowDefaultTypeInternal;
extern FollowDefaultTypeInternal _Follow_default_instance_;
class Followers;
class FollowersDefaultTypeInternal;
extern FollowersDefaultTypeInternal _Followers_default_instance_;
class Following;
class FollowingDefaultTypeInternal;
extern FollowingDefaultTypeInternal _Following_default_instance_;
class Replies;
class RepliesDefaultTypeInternal;
extern RepliesDefaultTypeInternal _Replies_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Users;
class UsersDefaultTypeInternal;
extern UsersDefaultTypeInternal _Users_default_instance_;
}  // namespace chirp
namespace google {
namespace protobuf {
template<> ::chirp::Chirps* Arena::CreateMaybeMessage<::chirp::Chirps>(Arena*);
template<> ::chirp::Follow* Arena::CreateMaybeMessage<::chirp::Follow>(Arena*);
template<> ::chirp::Followers* Arena::CreateMaybeMessage<::chirp::Followers>(Arena*);
template<> ::chirp::Following* Arena::CreateMaybeMessage<::chirp::Following>(Arena*);
template<> ::chirp::Replies* Arena::CreateMaybeMessage<::chirp::Replies>(Arena*);
template<> ::chirp::Reply* Arena::CreateMaybeMessage<::chirp::Reply>(Arena*);
template<> ::chirp::Users* Arena::CreateMaybeMessage<::chirp::Users>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chirp {

// ===================================================================

class Users : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Users) */ {
 public:
  Users();
  virtual ~Users();

  Users(const Users& from);

  inline Users& operator=(const Users& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Users(Users&& from) noexcept
    : Users() {
    *this = ::std::move(from);
  }

  inline Users& operator=(Users&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Users& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Users* internal_default_instance() {
    return reinterpret_cast<const Users*>(
               &_Users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Users* other);
  friend void swap(Users& a, Users& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Users* New() const final {
    return CreateMaybeMessage<Users>(NULL);
  }

  Users* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Users>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Users& from);
  void MergeFrom(const Users& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Users* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string username = 1;
  int username_size() const;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username(int index) const;
  ::std::string* mutable_username(int index);
  void set_username(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_username(int index, ::std::string&& value);
  #endif
  void set_username(int index, const char* value);
  void set_username(int index, const char* value, size_t size);
  ::std::string* add_username();
  void add_username(const ::std::string& value);
  #if LANG_CXX11
  void add_username(::std::string&& value);
  #endif
  void add_username(const char* value);
  void add_username(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& username() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_username();

  // @@protoc_insertion_point(class_scope:chirp.Users)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chirps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Chirps) */ {
 public:
  Chirps();
  virtual ~Chirps();

  Chirps(const Chirps& from);

  inline Chirps& operator=(const Chirps& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chirps(Chirps&& from) noexcept
    : Chirps() {
    *this = ::std::move(from);
  }

  inline Chirps& operator=(Chirps&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chirps& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chirps* internal_default_instance() {
    return reinterpret_cast<const Chirps*>(
               &_Chirps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Chirps* other);
  friend void swap(Chirps& a, Chirps& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chirps* New() const final {
    return CreateMaybeMessage<Chirps>(NULL);
  }

  Chirps* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chirps>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chirps& from);
  void MergeFrom(const Chirps& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chirps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chirp.Chirp chirps = 1;
  int chirps_size() const;
  void clear_chirps();
  static const int kChirpsFieldNumber = 1;
  ::chirp::Chirp* mutable_chirps(int index);
  ::google::protobuf::RepeatedPtrField< ::chirp::Chirp >*
      mutable_chirps();
  const ::chirp::Chirp& chirps(int index) const;
  ::chirp::Chirp* add_chirps();
  const ::google::protobuf::RepeatedPtrField< ::chirp::Chirp >&
      chirps() const;

  // @@protoc_insertion_point(class_scope:chirp.Chirps)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chirp::Chirp > chirps_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(NULL);
  }

  Reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 replies = 2;
  int replies_size() const;
  void clear_replies();
  static const int kRepliesFieldNumber = 2;
  ::google::protobuf::int64 replies(int index) const;
  void set_replies(int index, ::google::protobuf::int64 value);
  void add_replies(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      replies() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_replies();

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chirp.Reply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > replies_;
  mutable int _replies_cached_byte_size_;
  ::google::protobuf::int64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Replies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Replies) */ {
 public:
  Replies();
  virtual ~Replies();

  Replies(const Replies& from);

  inline Replies& operator=(const Replies& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Replies(Replies&& from) noexcept
    : Replies() {
    *this = ::std::move(from);
  }

  inline Replies& operator=(Replies&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Replies& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Replies* internal_default_instance() {
    return reinterpret_cast<const Replies*>(
               &_Replies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Replies* other);
  friend void swap(Replies& a, Replies& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Replies* New() const final {
    return CreateMaybeMessage<Replies>(NULL);
  }

  Replies* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Replies>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Replies& from);
  void MergeFrom(const Replies& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Replies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chirp.Reply allReplies = 1;
  int allreplies_size() const;
  void clear_allreplies();
  static const int kAllRepliesFieldNumber = 1;
  ::chirp::Reply* mutable_allreplies(int index);
  ::google::protobuf::RepeatedPtrField< ::chirp::Reply >*
      mutable_allreplies();
  const ::chirp::Reply& allreplies(int index) const;
  ::chirp::Reply* add_allreplies();
  const ::google::protobuf::RepeatedPtrField< ::chirp::Reply >&
      allreplies() const;

  // @@protoc_insertion_point(class_scope:chirp.Replies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chirp::Reply > allreplies_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Follow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Follow) */ {
 public:
  Follow();
  virtual ~Follow();

  Follow(const Follow& from);

  inline Follow& operator=(const Follow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Follow(Follow&& from) noexcept
    : Follow() {
    *this = ::std::move(from);
  }

  inline Follow& operator=(Follow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Follow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Follow* internal_default_instance() {
    return reinterpret_cast<const Follow*>(
               &_Follow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Follow* other);
  friend void swap(Follow& a, Follow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Follow* New() const final {
    return CreateMaybeMessage<Follow>(NULL);
  }

  Follow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Follow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Follow& from);
  void MergeFrom(const Follow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Follow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string follows = 2;
  int follows_size() const;
  void clear_follows();
  static const int kFollowsFieldNumber = 2;
  const ::std::string& follows(int index) const;
  ::std::string* mutable_follows(int index);
  void set_follows(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_follows(int index, ::std::string&& value);
  #endif
  void set_follows(int index, const char* value);
  void set_follows(int index, const char* value, size_t size);
  ::std::string* add_follows();
  void add_follows(const ::std::string& value);
  #if LANG_CXX11
  void add_follows(::std::string&& value);
  #endif
  void add_follows(const char* value);
  void add_follows(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& follows() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_follows();

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:chirp.Follow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> follows_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Following : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Following) */ {
 public:
  Following();
  virtual ~Following();

  Following(const Following& from);

  inline Following& operator=(const Following& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Following(Following&& from) noexcept
    : Following() {
    *this = ::std::move(from);
  }

  inline Following& operator=(Following&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Following& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Following* internal_default_instance() {
    return reinterpret_cast<const Following*>(
               &_Following_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Following* other);
  friend void swap(Following& a, Following& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Following* New() const final {
    return CreateMaybeMessage<Following>(NULL);
  }

  Following* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Following>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Following& from);
  void MergeFrom(const Following& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Following* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chirp.Follow following = 1;
  int following_size() const;
  void clear_following();
  static const int kFollowingFieldNumber = 1;
  ::chirp::Follow* mutable_following(int index);
  ::google::protobuf::RepeatedPtrField< ::chirp::Follow >*
      mutable_following();
  const ::chirp::Follow& following(int index) const;
  ::chirp::Follow* add_following();
  const ::google::protobuf::RepeatedPtrField< ::chirp::Follow >&
      following() const;

  // @@protoc_insertion_point(class_scope:chirp.Following)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chirp::Follow > following_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Followers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chirp.Followers) */ {
 public:
  Followers();
  virtual ~Followers();

  Followers(const Followers& from);

  inline Followers& operator=(const Followers& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Followers(Followers&& from) noexcept
    : Followers() {
    *this = ::std::move(from);
  }

  inline Followers& operator=(Followers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Followers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Followers* internal_default_instance() {
    return reinterpret_cast<const Followers*>(
               &_Followers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Followers* other);
  friend void swap(Followers& a, Followers& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Followers* New() const final {
    return CreateMaybeMessage<Followers>(NULL);
  }

  Followers* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Followers>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Followers& from);
  void MergeFrom(const Followers& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Followers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chirp.Follow followers = 1;
  int followers_size() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 1;
  ::chirp::Follow* mutable_followers(int index);
  ::google::protobuf::RepeatedPtrField< ::chirp::Follow >*
      mutable_followers();
  const ::chirp::Follow& followers(int index) const;
  ::chirp::Follow* add_followers();
  const ::google::protobuf::RepeatedPtrField< ::chirp::Follow >&
      followers() const;

  // @@protoc_insertion_point(class_scope:chirp.Followers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chirp::Follow > followers_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Backend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Users

// repeated string username = 1;
inline int Users::username_size() const {
  return username_.size();
}
inline void Users::clear_username() {
  username_.Clear();
}
inline const ::std::string& Users::username(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Users.username)
  return username_.Get(index);
}
inline ::std::string* Users::mutable_username(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Users.username)
  return username_.Mutable(index);
}
inline void Users::set_username(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chirp.Users.username)
  username_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Users::set_username(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chirp.Users.username)
  username_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Users::set_username(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chirp.Users.username)
}
inline void Users::set_username(int index, const char* value, size_t size) {
  username_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chirp.Users.username)
}
inline ::std::string* Users::add_username() {
  // @@protoc_insertion_point(field_add_mutable:chirp.Users.username)
  return username_.Add();
}
inline void Users::add_username(const ::std::string& value) {
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chirp.Users.username)
}
#if LANG_CXX11
inline void Users::add_username(::std::string&& value) {
  username_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chirp.Users.username)
}
#endif
inline void Users::add_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  username_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chirp.Users.username)
}
inline void Users::add_username(const char* value, size_t size) {
  username_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chirp.Users.username)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Users::username() const {
  // @@protoc_insertion_point(field_list:chirp.Users.username)
  return username_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Users::mutable_username() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Users.username)
  return &username_;
}

// -------------------------------------------------------------------

// Chirps

// repeated .chirp.Chirp chirps = 1;
inline int Chirps::chirps_size() const {
  return chirps_.size();
}
inline ::chirp::Chirp* Chirps::mutable_chirps(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Chirps.chirps)
  return chirps_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chirp::Chirp >*
Chirps::mutable_chirps() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Chirps.chirps)
  return &chirps_;
}
inline const ::chirp::Chirp& Chirps::chirps(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Chirps.chirps)
  return chirps_.Get(index);
}
inline ::chirp::Chirp* Chirps::add_chirps() {
  // @@protoc_insertion_point(field_add:chirp.Chirps.chirps)
  return chirps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chirp::Chirp >&
Chirps::chirps() const {
  // @@protoc_insertion_point(field_list:chirp.Chirps.chirps)
  return chirps_;
}

// -------------------------------------------------------------------

// Reply

// int64 id = 1;
inline void Reply::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Reply::id() const {
  // @@protoc_insertion_point(field_get:chirp.Reply.id)
  return id_;
}
inline void Reply::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:chirp.Reply.id)
}

// repeated int64 replies = 2;
inline int Reply::replies_size() const {
  return replies_.size();
}
inline void Reply::clear_replies() {
  replies_.Clear();
}
inline ::google::protobuf::int64 Reply::replies(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Reply.replies)
  return replies_.Get(index);
}
inline void Reply::set_replies(int index, ::google::protobuf::int64 value) {
  replies_.Set(index, value);
  // @@protoc_insertion_point(field_set:chirp.Reply.replies)
}
inline void Reply::add_replies(::google::protobuf::int64 value) {
  replies_.Add(value);
  // @@protoc_insertion_point(field_add:chirp.Reply.replies)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Reply::replies() const {
  // @@protoc_insertion_point(field_list:chirp.Reply.replies)
  return replies_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Reply::mutable_replies() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Reply.replies)
  return &replies_;
}

// -------------------------------------------------------------------

// Replies

// repeated .chirp.Reply allReplies = 1;
inline int Replies::allreplies_size() const {
  return allreplies_.size();
}
inline void Replies::clear_allreplies() {
  allreplies_.Clear();
}
inline ::chirp::Reply* Replies::mutable_allreplies(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Replies.allReplies)
  return allreplies_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chirp::Reply >*
Replies::mutable_allreplies() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Replies.allReplies)
  return &allreplies_;
}
inline const ::chirp::Reply& Replies::allreplies(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Replies.allReplies)
  return allreplies_.Get(index);
}
inline ::chirp::Reply* Replies::add_allreplies() {
  // @@protoc_insertion_point(field_add:chirp.Replies.allReplies)
  return allreplies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chirp::Reply >&
Replies::allreplies() const {
  // @@protoc_insertion_point(field_list:chirp.Replies.allReplies)
  return allreplies_;
}

// -------------------------------------------------------------------

// Follow

// string username = 1;
inline void Follow::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Follow::username() const {
  // @@protoc_insertion_point(field_get:chirp.Follow.username)
  return username_.GetNoArena();
}
inline void Follow::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chirp.Follow.username)
}
#if LANG_CXX11
inline void Follow::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chirp.Follow.username)
}
#endif
inline void Follow::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chirp.Follow.username)
}
inline void Follow::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chirp.Follow.username)
}
inline ::std::string* Follow::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:chirp.Follow.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Follow::release_username() {
  // @@protoc_insertion_point(field_release:chirp.Follow.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Follow::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:chirp.Follow.username)
}

// repeated string follows = 2;
inline int Follow::follows_size() const {
  return follows_.size();
}
inline void Follow::clear_follows() {
  follows_.Clear();
}
inline const ::std::string& Follow::follows(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Follow.follows)
  return follows_.Get(index);
}
inline ::std::string* Follow::mutable_follows(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Follow.follows)
  return follows_.Mutable(index);
}
inline void Follow::set_follows(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chirp.Follow.follows)
  follows_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Follow::set_follows(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:chirp.Follow.follows)
  follows_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Follow::set_follows(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  follows_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chirp.Follow.follows)
}
inline void Follow::set_follows(int index, const char* value, size_t size) {
  follows_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chirp.Follow.follows)
}
inline ::std::string* Follow::add_follows() {
  // @@protoc_insertion_point(field_add_mutable:chirp.Follow.follows)
  return follows_.Add();
}
inline void Follow::add_follows(const ::std::string& value) {
  follows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chirp.Follow.follows)
}
#if LANG_CXX11
inline void Follow::add_follows(::std::string&& value) {
  follows_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chirp.Follow.follows)
}
#endif
inline void Follow::add_follows(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  follows_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chirp.Follow.follows)
}
inline void Follow::add_follows(const char* value, size_t size) {
  follows_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chirp.Follow.follows)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Follow::follows() const {
  // @@protoc_insertion_point(field_list:chirp.Follow.follows)
  return follows_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Follow::mutable_follows() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Follow.follows)
  return &follows_;
}

// -------------------------------------------------------------------

// Following

// repeated .chirp.Follow following = 1;
inline int Following::following_size() const {
  return following_.size();
}
inline void Following::clear_following() {
  following_.Clear();
}
inline ::chirp::Follow* Following::mutable_following(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Following.following)
  return following_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chirp::Follow >*
Following::mutable_following() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Following.following)
  return &following_;
}
inline const ::chirp::Follow& Following::following(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Following.following)
  return following_.Get(index);
}
inline ::chirp::Follow* Following::add_following() {
  // @@protoc_insertion_point(field_add:chirp.Following.following)
  return following_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chirp::Follow >&
Following::following() const {
  // @@protoc_insertion_point(field_list:chirp.Following.following)
  return following_;
}

// -------------------------------------------------------------------

// Followers

// repeated .chirp.Follow followers = 1;
inline int Followers::followers_size() const {
  return followers_.size();
}
inline void Followers::clear_followers() {
  followers_.Clear();
}
inline ::chirp::Follow* Followers::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:chirp.Followers.followers)
  return followers_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chirp::Follow >*
Followers::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:chirp.Followers.followers)
  return &followers_;
}
inline const ::chirp::Follow& Followers::followers(int index) const {
  // @@protoc_insertion_point(field_get:chirp.Followers.followers)
  return followers_.Get(index);
}
inline ::chirp::Follow* Followers::add_followers() {
  // @@protoc_insertion_point(field_add:chirp.Followers.followers)
  return followers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chirp::Follow >&
Followers::followers() const {
  // @@protoc_insertion_point(field_list:chirp.Followers.followers)
  return followers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chirp

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Backend_2eproto
